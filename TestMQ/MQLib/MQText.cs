using System;
using System.Collections;


public class MQText
{
    static int idx = 0;
    static ArrayList mesText = new ArrayList();

    public MQText()
    {
        mesText.Add("MQRC_NONE");
        mesText.Add("MQRC_ALIAS_BASE_Q_TYPE_ERROR");
        mesText.Add("MQRC_ALREADY_CONNECTED");
        mesText.Add("MQRC_BACKED_OUT");
        mesText.Add("MQRC_BUFFER_ERROR");
        mesText.Add("MQRC_BUFFER_LENGTH_ERROR");
        mesText.Add("MQRC_CHAR_ATTR_LENGTH_ERROR");
        mesText.Add("MQRC_CHAR_ATTRS_ERROR");
        mesText.Add("MQRC_CHAR_ATTRS_TOO_SHORT");
        mesText.Add("MQRC_CONNECTION_BROKEN");
        mesText.Add("MQRC_DATA_LENGTH_ERROR");
        mesText.Add("MQRC_DYNAMIC_Q_NAME_ERROR");
        mesText.Add("MQRC_ENVIRONMENT_ERROR");
        mesText.Add("MQRC_EXPIRY_ERROR");
        mesText.Add("MQRC_FEEDBACK_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_GET_INHIBITED");
        mesText.Add("MQRC_HANDLE_NOT_AVAILABLE");
        mesText.Add("MQRC_HCONN_ERROR");
        mesText.Add("MQRC_HOBJ_ERROR");
        mesText.Add("MQRC_INHIBIT_VALUE_ERROR");
        mesText.Add("MQRC_INT_ATTR_COUNT_ERROR");
        mesText.Add("MQRC_INT_ATTR_COUNT_TOO_SMALL");
        mesText.Add("MQRC_INT_ATTRS_ARRAY_ERROR");
        mesText.Add("MQRC_SYNCPOINT_LIMIT_REACHED");
        mesText.Add("MQRC_MAX_CONNS_LIMIT_REACHED");
        mesText.Add("MQRC_MD_ERROR");
        mesText.Add("MQRC_MISSING_REPLY_TO_Q");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_MSG_TYPE_ERROR");
        mesText.Add("MQRC_MSG_TOO_BIG_FOR_Q");
        mesText.Add("MQRC_MSG_TOO_BIG_FOR_Q_MGR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_NO_MSG_AVAILABLE");
        mesText.Add("MQRC_NO_MSG_UNDER_CURSOR");
        mesText.Add("MQRC_NOT_AUTHORIZED");
        mesText.Add("MQRC_NOT_OPEN_FOR_BROWSE");
        mesText.Add("MQRC_NOT_OPEN_FOR_INPUT");
        mesText.Add("MQRC_NOT_OPEN_FOR_INQUIRE");
        mesText.Add("MQRC_NOT_OPEN_FOR_OUTPUT");
        mesText.Add("MQRC_NOT_OPEN_FOR_SET");
        mesText.Add("MQRC_OBJECT_CHANGED");
        mesText.Add("MQRC_OBJECT_IN_USE");
        mesText.Add("MQRC_OBJECT_TYPE_ERROR");
        mesText.Add("MQRC_OD_ERROR");
        mesText.Add("MQRC_OPTION_NOT_VALID_FOR_TYPE");
        mesText.Add("MQRC_OPTIONS_ERROR");
        mesText.Add("MQRC_PERSISTENCE_ERROR");
        mesText.Add("MQRC_PERSISTENT_NOT_ALLOWED");
        mesText.Add("MQRC_PRIORITY_EXCEEDS_MAXIMUM");
        mesText.Add("MQRC_PRIORITY_ERROR");
        mesText.Add("MQRC_PUT_INHIBITED");
        mesText.Add("MQRC_Q_DELETED");
        mesText.Add("MQRC_Q_FULL");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_Q_NOT_EMPTY");
        mesText.Add("MQRC_Q_SPACE_NOT_AVAILABLE");
        mesText.Add("MQRC_Q_TYPE_ERROR");
        mesText.Add("MQRC_Q_MGR_NAME_ERROR");
        mesText.Add("MQRC_Q_MGR_NOT_AVAILABLE");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_REPORT_OPTIONS_ERROR");
        mesText.Add("MQRC_SECOND_MARK_NOT_ALLOWED");
        mesText.Add("MQRC_SECURITY_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_SELECTOR_COUNT_ERROR");
        mesText.Add("MQRC_SELECTOR_LIMIT_EXCEEDED");
        mesText.Add("MQRC_SELECTOR_ERROR");
        mesText.Add("MQRC_SELECTOR_NOT_FOR_TYPE");
        mesText.Add("MQRC_SIGNAL_OUTSTANDING");
        mesText.Add("MQRC_SIGNAL_REQUEST_ACCEPTED");
        mesText.Add("MQRC_STORAGE_NOT_AVAILABLE");
        mesText.Add("MQRC_SYNCPOINT_NOT_AVAILABLE");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_TRIGGER_CONTROL_ERROR");
        mesText.Add("MQRC_TRIGGER_DEPTH_ERROR");
        mesText.Add("MQRC_TRIGGER_MSG_PRIORITY_ERR");
        mesText.Add("MQRC_TRIGGER_TYPE_ERROR");
        mesText.Add("MQRC_TRUNCATED_MSG_ACCEPTED");
        mesText.Add("MQRC_TRUNCATED_MSG_FAILED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_UNKNOWN_ALIAS_BASE_Q");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_UNKNOWN_OBJECT_NAME");
        mesText.Add("MQRC_UNKNOWN_OBJECT_Q_MGR");
        mesText.Add("MQRC_UNKNOWN_REMOTE_Q_MGR");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_WAIT_INTERVAL_ERROR");
        mesText.Add("MQRC_XMIT_Q_TYPE_ERROR");
        mesText.Add("MQRC_XMIT_Q_USAGE_ERROR");
        mesText.Add("MQRC_NOT_OPEN_FOR_PASS_ALL");
        mesText.Add("MQRC_NOT_OPEN_FOR_PASS_IDENT");
        mesText.Add("MQRC_NOT_OPEN_FOR_SET_ALL");
        mesText.Add("MQRC_NOT_OPEN_FOR_SET_IDENT");
        mesText.Add("MQRC_CONTEXT_HANDLE_ERROR");
        mesText.Add("MQRC_CONTEXT_NOT_AVAILABLE");
        mesText.Add("MQRC_SIGNAL1_ERROR");
        mesText.Add("MQRC_OBJECT_ALREADY_EXISTS");
        mesText.Add("MQRC_OBJECT_DAMAGED");
        mesText.Add("MQRC_RESOURCE_PROBLEM");
        mesText.Add("MQRC_ANOTHER_Q_MGR_CONNECTED");
        mesText.Add("MQRC_UNKNOWN_REPORT_OPTION");
        mesText.Add("MQRC_STORAGE_CLASS_ERROR");
        mesText.Add("MQRC_COD_NOT_VALID_FOR_XCF_Q");
        mesText.Add("MQRC_XWAIT_CANCELED");
        mesText.Add("MQRC_XWAIT_ERROR");
        mesText.Add("MQRC_SUPPRESSED_BY_EXIT");
        mesText.Add("MQRC_FORMAT_ERROR");
        mesText.Add("MQRC_SOURCE_CCSID_ERROR");
        mesText.Add("MQRC_SOURCE_INTEGER_ENC_ERROR");
        mesText.Add("MQRC_SOURCE_DECIMAL_ENC_ERROR");
        mesText.Add("MQRC_SOURCE_FLOAT_ENC_ERROR");
        mesText.Add("MQRC_TARGET_CCSID_ERROR");
        mesText.Add("MQRC_TARGET_INTEGER_ENC_ERROR");
        mesText.Add("MQRC_TARGET_DECIMAL_ENC_ERROR");
        mesText.Add("MQRC_TARGET_FLOAT_ENC_ERROR");
        mesText.Add("MQRC_NOT_CONVERTED");
        mesText.Add("MQRC_CONVERTED_MSG_TOO_BIG");
        mesText.Add("MQRC_NO_EXTERNAL_PARTICIPANTS");
        mesText.Add("MQRC_PARTICIPANT_NOT_AVAILABLE");
        mesText.Add("MQRC_OUTCOME_MIXED");
        mesText.Add("MQRC_OUTCOME_PENDING");
        mesText.Add("MQRC_BRIDGE_STARTED");
        mesText.Add("MQRC_BRIDGE_STOPPED");
        mesText.Add("MQRC_ADAPTER_STORAGE_SHORTAGE");
        mesText.Add("MQRC_UOW_IN_PROGRESS");
        mesText.Add("MQRC_ADAPTER_CONN_LOAD_ERROR");
        mesText.Add("MQRC_ADAPTER_SERV_LOAD_ERROR");
        mesText.Add("MQRC_ADAPTER_DEFS_ERROR");
        mesText.Add("MQRC_ADAPTER_DEFS_LOAD_ERROR");
        mesText.Add("MQRC_ADAPTER_CONV_LOAD_ERROR");
        mesText.Add("MQRC_BO_ERROR");
        mesText.Add("MQRC_DH_ERROR");
        mesText.Add("MQRC_MULTIPLE_REASONS");
        mesText.Add("MQRC_OPEN_FAILED");
        mesText.Add("MQRC_ADAPTER_DISC_LOAD_ERROR");
        mesText.Add("MQRC_CNO_ERROR");
        mesText.Add("MQRC_CICS_WAIT_FAILED");
        mesText.Add("MQRC_DLH_ERROR");
        mesText.Add("MQRC_HEADER_ERROR");
        mesText.Add("MQRC_SOURCE_LENGTH_ERROR");
        mesText.Add("MQRC_TARGET_LENGTH_ERROR");
        mesText.Add("MQRC_SOURCE_BUFFER_ERROR");
        mesText.Add("MQRC_TARGET_BUFFER_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_IIH_ERROR");
        mesText.Add("MQRC_PCF_ERROR");
        mesText.Add("MQRC_DBCS_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_OBJECT_NAME_ERROR");
        mesText.Add("MQRC_OBJECT_Q_MGR_NAME_ERROR");
        mesText.Add("MQRC_RECS_PRESENT_ERROR");
        mesText.Add("MQRC_OBJECT_RECORDS_ERROR");
        mesText.Add("MQRC_RESPONSE_RECORDS_ERROR");
        mesText.Add("MQRC_ASID_MISMATCH");
        mesText.Add("MQRC_PMO_RECORD_FLAGS_ERROR");
        mesText.Add("MQRC_PUT_MSG_RECORDS_ERROR");
        mesText.Add("MQRC_CONN_ID_IN_USE");
        mesText.Add("MQRC_Q_MGR_QUIESCING");
        mesText.Add("MQRC_Q_MGR_STOPPING");
        mesText.Add("MQRC_DUPLICATE_RECOV_COORD");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_PMO_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_API_EXIT_LOAD_ERROR");
        mesText.Add("MQRC_REMOTE_Q_NAME_ERROR");
        mesText.Add("MQRC_INCONSISTENT_PERSISTENCE");
        mesText.Add("MQRC_GMO_ERROR");
        mesText.Add("MQRC_CICS_BRIDGE_RESTRICTION");
        mesText.Add("MQRC_STOPPED_BY_CLUSTER_EXIT");
        mesText.Add("MQRC_CLUSTER_RESOLUTION_ERROR");
        mesText.Add("MQRC_CONVERTED_STRING_TOO_BIG");
        mesText.Add("MQRC_TMC_ERROR");
        mesText.Add("MQRC_PAGESET_FULL");
        mesText.Add("MQRC_PAGESET_ERROR");
        mesText.Add("MQRC_NAME_NOT_VALID_FOR_TYPE");
        mesText.Add("MQRC_UNEXPECTED_ERROR");
        mesText.Add("MQRC_UNKNOWN_XMIT_Q");
        mesText.Add("MQRC_UNKNOWN_DEF_XMIT_Q");
        mesText.Add("MQRC_DEF_XMIT_Q_TYPE_ERROR");
        mesText.Add("MQRC_DEF_XMIT_Q_USAGE_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_NAME_IN_USE");
        mesText.Add("MQRC_CONNECTION_QUIESCING");
        mesText.Add("MQRC_CONNECTION_STOPPING");
        mesText.Add("MQRC_ADAPTER_NOT_AVAILABLE");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_MSG_ID_ERROR");
        mesText.Add("MQRC_CORREL_ID_ERROR");
        mesText.Add("MQRC_FILE_SYSTEM_ERROR");
        mesText.Add("MQRC_NO_MSG_LOCKED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_FILE_NOT_AUDITED");
        mesText.Add("MQRC_CONNECTION_NOT_AUTHORIZED");
        mesText.Add("MQRC_MSG_TOO_BIG_FOR_CHANNEL");
        mesText.Add("MQRC_CALL_IN_PROGRESS");
        mesText.Add("MQRC_RMH_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_Q_MGR_ACTIVE");
        mesText.Add("MQRC_Q_MGR_NOT_ACTIVE");
        mesText.Add("MQRC_Q_DEPTH_HIGH");
        mesText.Add("MQRC_Q_DEPTH_LOW");
        mesText.Add("MQRC_Q_SERVICE_INTERVAL_HIGH");
        mesText.Add("MQRC_Q_SERVICE_INTERVAL_OK");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_UNIT_OF_WORK_NOT_STARTED");
        mesText.Add("MQRC_CHANNEL_AUTO_DEF_OK");
        mesText.Add("MQRC_CHANNEL_AUTO_DEF_ERROR");
        mesText.Add("MQRC_CFH_ERROR");
        mesText.Add("MQRC_CFIL_ERROR");
        mesText.Add("MQRC_CFIN_ERROR");
        mesText.Add("MQRC_CFSL_ERROR");
        mesText.Add("MQRC_CFST_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_INCOMPLETE_GROUP");
        mesText.Add("MQRC_INCOMPLETE_MSG");
        mesText.Add("MQRC_INCONSISTENT_CCSIDS");
        mesText.Add("MQRC_INCONSISTENT_ENCODINGS");
        mesText.Add("MQRC_INCONSISTENT_UOW");
        mesText.Add("MQRC_INVALID_MSG_UNDER_CURSOR");
        mesText.Add("MQRC_MATCH_OPTIONS_ERROR");
        mesText.Add("MQRC_MDE_ERROR");
        mesText.Add("MQRC_MSG_FLAGS_ERROR");
        mesText.Add("MQRC_MSG_SEQ_NUMBER_ERROR");
        mesText.Add("MQRC_OFFSET_ERROR");
        mesText.Add("MQRC_ORIGINAL_LENGTH_ERROR");
        mesText.Add("MQRC_SEGMENT_LENGTH_ZERO");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_UOW_NOT_AVAILABLE");
        mesText.Add("MQRC_WRONG_GMO_VERSION");
        mesText.Add("MQRC_WRONG_MD_VERSION");
        mesText.Add("MQRC_GROUP_ID_ERROR");
        mesText.Add("MQRC_INCONSISTENT_BROWSE");
        mesText.Add("MQRC_XQH_ERROR");
        mesText.Add("MQRC_SRC_ENV_ERROR");
        mesText.Add("MQRC_SRC_NAME_ERROR");
        mesText.Add("MQRC_DEST_ENV_ERROR");
        mesText.Add("MQRC_DEST_NAME_ERROR");
        mesText.Add("MQRC_TM_ERROR");
        mesText.Add("MQRC_CLUSTER_EXIT_ERROR");
        mesText.Add("MQRC_CLUSTER_EXIT_LOAD_ERROR");
        mesText.Add("MQRC_CLUSTER_PUT_INHIBITED");
        mesText.Add("MQRC_CLUSTER_RESOURCE_ERROR");
        mesText.Add("MQRC_NO_DESTINATIONS_AVAILABLE");
        mesText.Add("MQRC_CONN_TAG_IN_USE");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_CONNECTION_ERROR");
        mesText.Add("MQRC_OPTION_ENVIRONMENT_ERROR");
        mesText.Add("NOTUSED");
        mesText.Add("NOTUSED");
        mesText.Add("MQRC_CD_ERROR");
        mesText.Add("MQRC_CLIENT_CONN_ERROR");
        mesText.Add("MQRC_CHANNEL_STOPPED_BY_USER");
        mesText.Add("MQRC_HCONFIG_ERROR");
        mesText.Add("MQRC_FUNCTION_ERROR");
        mesText.Add("MQRC_CHANNEL_STARTED");
        mesText.Add("MQRC_CHANNEL_STOPPED");
        mesText.Add("MQRC_CHANNEL_CONV_ERROR");
        mesText.Add("MQRC_SERVICE_NOT_AVAILABLE");
        mesText.Add("MQRC_INITIALIZATION_FAILED");
        mesText.Add("MQRC_TERMINATION_FAILED");
        mesText.Add("MQRC_UNKNOWN_Q_NAME");
        mesText.Add("MQRC_SERVICE_ERROR");
        mesText.Add("MQRC_Q_ALREADY_EXISTS");
        mesText.Add("MQRC_USER_ID_NOT_AVAILABLE");
        mesText.Add("MQRC_UNKNOWN_ENTITY");
        mesText.Add("MQRC_UNKNOWN_AUTH_ENTITY");
        mesText.Add("MQRC_UNKNOWN_REF_OBJECT");
        mesText.Add("MQRC_CHANNEL_ACTIVATED");
        mesText.Add("MQRC_CHANNEL_NOT_ACTIVATED");
        mesText.Add("MQRC_UOW_CANCELED");
        mesText.Add("MQRC_FUNCTION_NOT_SUPPORTED");
        mesText.Add("MQRC_SELECTOR_TYPE_ERROR");
        mesText.Add("MQRC_COMMAND_TYPE_ERROR");
        mesText.Add("MQRC_MULTIPLE_INSTANCE_ERROR");
        mesText.Add("MQRC_SYSTEM_ITEM_NOT_ALTERABLE");
        mesText.Add("MQRC_BAG_CONVERSION_ERROR");
        mesText.Add("MQRC_SELECTOR_OUT_OF_RANGE");
        mesText.Add("MQRC_SELECTOR_NOT_UNIQUE");
        mesText.Add("MQRC_INDEX_NOT_PRESENT");
        mesText.Add("MQRC_STRING_ERROR");
        mesText.Add("MQRC_ENCODING_NOT_SUPPORTED");
        mesText.Add("MQRC_SELECTOR_NOT_PRESENT");
        mesText.Add("MQRC_OUT_SELECTOR_ERROR");
        mesText.Add("MQRC_STRING_TRUNCATED");
        mesText.Add("MQRC_SELECTOR_WRONG_TYPE");
        mesText.Add("MQRC_INCONSISTENT_ITEM_TYPE");
        mesText.Add("MQRC_INDEX_ERROR");
        mesText.Add("MQRC_SYSTEM_BAG_NOT_ALTERABLE");
        mesText.Add("MQRC_ITEM_COUNT_ERROR");
        mesText.Add("MQRC_FORMAT_NOT_SUPPORTED");
        mesText.Add("MQRC_SELECTOR_NOT_SUPPORTED");
        mesText.Add("MQRC_ITEM_VALUE_ERROR");
        mesText.Add("MQRC_HBAG_ERROR");
        mesText.Add("MQRC_PARAMETER_MISSING");
        mesText.Add("MQRC_CMD_SERVER_NOT_AVAILABLE");
        mesText.Add("MQRC_STRING_LENGTH_ERROR");
        mesText.Add("MQRC_INQUIRY_COMMAND_ERROR");
        mesText.Add("MQRC_NESTED_BAG_NOT_SUPPORTED");
        mesText.Add("MQRC_BAG_WRONG_TYPE");
        mesText.Add("MQRC_ITEM_TYPE_ERROR");
        mesText.Add("MQRC_SYSTEM_BAG_NOT_DELETABLE");
        mesText.Add("MQRC_SYSTEM_ITEM_NOT_DELETABLE");
        mesText.Add("MQRC_CODED_CHAR_SET_ID_ERROR");
        mesText.Add("MQRC_MSG_TOKEN_ERROR");
        mesText.Add("MQRC_MISSING_WIH");
        mesText.Add("MQRC_WIH_ERROR");
        mesText.Add("MQRC_RFH_ERROR");
        mesText.Add("MQRC_RFH_STRING_ERROR");
        mesText.Add("MQRC_RFH_COMMAND_ERROR");
        mesText.Add("MQRC_RFH_PARM_ERROR");
        mesText.Add("MQRC_RFH_DUPLICATE_PARM");
        mesText.Add("MQRC_RFH_PARM_MISSING");
        mesText.Add("MQRC_CHAR_CONVERSION_ERROR");
        mesText.Add("MQRC_UCS2_CONVERSION_ERROR");
        mesText.Add("MQRC_DB2_NOT_AVAILABLE");
        mesText.Add("MQRC_OBJECT_NOT_UNIQUE");
        mesText.Add("MQRC_CONN_TAG_NOT_RELEASED");
        mesText.Add("MQRC_CF_NOT_AVAILABLE");
        mesText.Add("MQRC_CF_STRUC_IN_USE");
        mesText.Add("MQRC_CF_STRUC_LIST_HDR_IN_USE");
        mesText.Add("MQRC_CF_STRUC_AUTH_FAILED");
        mesText.Add("MQRC_CF_STRUC_ERROR");
        mesText.Add("MQRC_CONN_TAG_NOT_USABLE");
        mesText.Add("MQRC_GLOBAL_UOW_CONFLICT");
        mesText.Add("MQRC_LOCAL_UOW_CONFLICT");
        mesText.Add("MQRC_HANDLE_IN_USE_FOR_UOW");
        mesText.Add("MQRC_UOW_ENLISTMENT_ERROR");
        mesText.Add("MQRC_UOW_MIX_NOT_SUPPORTED");
        mesText.Add("MQRC_WXP_ERROR");
        mesText.Add("MQRC_CURRENT_RECORD_ERROR");
        mesText.Add("MQRC_NEXT_OFFSET_ERROR");
        mesText.Add("MQRC_NO_RECORD_AVAILABLE");
        mesText.Add("MQRC_OBJECT_LEVEL_INCOMPATIBLE");
    }

    public string getMQText(int MsgNo)
    {
        idx = 0;
        if (MsgNo != 0)
        {
            idx = MsgNo - 2000;
        }
        try
        {
            return mesText[idx].ToString();
        }
        catch (Exception)
        {
            // Handle exception
            return "NOTFOUND";
        }
    }

    [Serializable]
    public class Member
    {

        public string Id;
        public string Name;
        public string Tel;
        public string Address;

    }
}
